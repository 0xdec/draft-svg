{"version":3,"sources":["draft-svg.min.js","draft-svg.js"],"names":["draft","View","mixin","svg","width","height","_this","this","_svgMaxWidth","_svgMaxHeight","undefined","_svg","calcX","calcY","domPrefix","domID","find","_render","listener","NS","VERSION","element","px","prop","doc","document","getElementByID","node","createElementNS","type","styleListener","val","replace","color","stroke","test","setAttribute","setStyle","on","_len","arguments","length","args","Array","_key","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","style","value","_arr","_i","defaults","apply","target","err","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","children","child","childNode","appendChild","removeChild","id","join","zoom","Math","min","svgWidth","svgHeight","parent"],"mappings":"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","file":"draft-svg.min.js","sourcesContent":[null,"/*\n* draft-svg - A plugin for draft.js that renders models using SVG\n* version v0.1.0\n* http://draft.D1SC0te.ch\n*\n* copyright Jordi Pakey-Rodriguez <jordi.orlando@hexa.io>\n* license MIT\n*\n* BUILT: Tue Feb 02 2016 03:17:43 GMT-0600 (CST)\n*/\n'use strict';\n\n(function () {\n  draft.View.mixin({\n    svg: function svg(width, height) {\n      var _this = this;\n\n      this._svgMaxWidth = width || this._svgMaxWidth || this.width();\n      this._svgMaxHeight = height || this._svgMaxHeight || this.height();\n\n      if (this._svg === undefined) {\n        var calcX;\n        var calcY;\n        var domPrefix;\n        var domID;\n        var find;\n\n        var _render;\n\n        var svg;\n        var listener;\n\n        (function () {\n          var NS = 'http://www.w3.org/2000/svg';\n          // const XMLNS = 'http://www.w3.org/2000/xmlns/';\n          // const XLINK = 'http://www.w3.org/1999/xlink';\n          var VERSION = '1.1';\n\n          calcX = function calcX(element) {\n            return draft.px(element.prop('x')) - element.width() / 2;\n          };\n\n          calcY = function calcY(element) {\n            return -draft.px(element.prop('y')) - element.height() / 2;\n          };\n\n          domPrefix = _this.doc.domID + ':' + _this.domID + ':svg';\n\n          domID = function domID(element) {\n            return domPrefix + ':' + element.domID;\n          };\n\n          find = function find(element) {\n            return document.getElementByID(domID(element));\n          };\n\n          _render = function render(element) {\n\n            var node = document.createElementNS(NS, element.type);\n\n            // TODO: separate listener for each property?\n            var listener;\n\n            var styleListener = function styleListener(prop, val) {\n              prop = prop.replace('.color', '').replace('.', '-');\n\n              var color = /^(fill|stroke)(-opacity)?$/;\n              var stroke = /^stroke-(width)?$/;\n\n              if (color.test(prop) || stroke.test(prop)) {\n                node.setAttribute(prop, val);\n              }\n            };\n\n            var setStyle = function setStyle() {\n              element.on('change', styleListener);\n\n              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var style = _step.value;\n                  var _arr = ['color', 'opacity', 'width'];\n\n                  for (var _i = 0; _i < _arr.length; _i++) {\n                    var prop = _arr[_i];\n                    prop = style + '.' + prop;\n                    var val = element.prop(prop) || draft.defaults[prop];\n\n                    styleListener.apply({ target: element }, [prop, val]);\n                  }\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n            };\n\n            switch (element.type) {\n              case 'group':\n                node = document.createElementNS(NS, 'g');\n\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                  for (var _iterator2 = element.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var child = _step2.value;\n\n                    var childNode = _render(child);\n                    if (childNode) {\n                      node.appendChild(childNode);\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError2 = true;\n                  _iteratorError2 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                      _iterator2.return();\n                    }\n                  } finally {\n                    if (_didIteratorError2) {\n                      throw _iteratorError2;\n                    }\n                  }\n                }\n\n                element.on('add', function (child) {\n                  var childNode = _render(child);\n                  if (childNode) {\n                    node.appendChild(childNode);\n                  }\n                });\n\n                element.on('remove', function (child) {\n                  node.removeChild(find(child));\n                });\n              // Falls through\n              case 'rect':\n                setStyle('fill', 'stroke');\n\n                listener = function listener(prop, val) {\n                  val = draft.px(val);\n\n                  switch (prop) {\n                    case 'width':\n                      node.setAttribute('width', val);\n                    // Falls through\n                    case 'x':\n                      node.setAttribute('x', calcX(this.target));\n                      break;\n                    case 'height':\n                      node.setAttribute('height', val);\n                    // Falls through\n                    case 'y':\n                      node.setAttribute('y', calcY(this.target));\n                      break;\n                  }\n                };\n\n                break;\n              case 'circle':\n                setStyle('fill', 'stroke');\n\n                listener = function listener(prop, val) {\n                  val = draft.px(val);\n\n                  /* if (prop === 'cy') {\n                    val *= -1;\n                  }\n                   node.setAttribute(prop, val); */\n\n                  switch (prop) {\n                    case 'r':\n                      node.setAttribute('r', val);\n                      break;\n                    case 'x':\n                      node.setAttribute('cx', val);\n                      break;\n                    case 'y':\n                      node.setAttribute('cy', -val);\n                      break;\n                  }\n                };\n\n                break;\n            }\n\n            // TODO: support all elements\n            if (typeof listener === 'function') {\n              node.id = domID(element);\n\n              for (var prop in element.prop()) {\n                listener.apply({ target: element }, [prop, element.prop(prop)]);\n              }\n\n              element.on('change', listener);\n\n              return node;\n            }\n          };\n\n          svg = _this._svg = document.createElementNS(NS, 'svg');\n\n          svg.setAttribute('xmlns', NS);\n          svg.setAttribute('version', VERSION);\n          // svg.setAttributeNS(XMLNS, 'xmlns:xlink', XLINK);\n\n          svg.id = domID(_this);\n\n          listener = function listener(prop) {\n            if (prop === 'width' || prop === 'height') {\n              // 1 SVG user unit = 1px\n              svg.setAttribute('viewBox', [calcX(this.target), calcY(this.target), this.target.width(), this.target.height()].join(' '));\n\n              var zoom = Math.min(draft.px(this.target._svgMaxWidth) / this.target.width(), draft.px(this.target._svgMaxHeight) / this.target.height());\n\n              var svgWidth = this.target.width() * zoom;\n              var svgHeight = this.target.height() * zoom;\n\n              this.target._svg.setAttribute('width', svgWidth);\n              this.target._svg.setAttribute('height', svgHeight);\n\n              // console.info('aspect ratio:', this.target.aspectRatio);\n            }\n          };\n\n          listener.apply({ target: _this }, ['width']);\n          listener.apply({ target: _this }, ['height']);\n\n          _this.on('change', listener);\n\n          svg.appendChild(_render(_this.parent));\n        })();\n      }\n\n      return this._svg;\n    }\n  });\n})();"],"sourceRoot":"/source/"}