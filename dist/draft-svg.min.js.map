{"version":3,"sources":["draft-svg.min.js","draft-svg.js"],"names":["draft","View","mixin","svg","width","height","_this","this","getWidth","element","types","length","prop","valueOf","getHeight","calcX","calcY","domPrefix","doc","domID","find","document","getElementByID","_svgMaxWidth","_svgMaxHeight","undefined","_svg","_render","listener","NS","VERSION","node","createElementNS","type","styleListener","val","replace","color","stroke","test","setAttribute","setStyle","on","_len","arguments","args","Array","_key","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","style","value","_arr","_i","defaults","err","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","children","child","childNode","appendChild","removeChild","target","id","apply","targetWidth","targetHeight","join","zoom","Math","min","svgWidth","svgHeight","parent"],"mappings":"AAAA;AACA,ACDA,cAEA,WACAA,MAAAC,KAAAC,OACAC,IAAA,QAAAA,GAAAC,EAAAC,GACA,GAAAC,GAAAC,KAEAC,EAAA,SAAAC,GACA,MAAAT,OAAAU,MAAAC,OAAAF,EAAAG,KAAA,UAAAC,WAEAC,EAAA,SAAAL,GACA,MAAAT,OAAAU,MAAAC,OAAAF,EAAAG,KAAA,WAAAC,WAGAE,EAAA,SAAAN,GACA,MAAAT,OAAAU,MAAAC,OAAAF,EAAAG,KAAA,MAAA,GAAAJ,EAAAC,GAAA,GAEAO,EAAA,SAAAP,GACA,OAAAT,MAAAU,MAAAC,OAAAF,EAAAG,KAAA,MAAA,GAAAE,EAAAL,GAAA,GAGAQ,EAAAV,KAAAW,IAAAC,MAAA,IAAAZ,KAAAY,MAAA,OACAA,EAAA,SAAAV,GACA,MAAAQ,GAAA,IAAAR,EAAAU,OAEAC,EAAA,SAAAX,GACA,MAAAY,UAAAC,eAAAH,EAAAV,IAMA,IAHAF,KAAAgB,aAAAnB,GAAAG,KAAAgB,cAAAf,EAAAD,MACAA,KAAAiB,cAAAnB,GAAAE,KAAAiB,eAAAV,EAAAP,MAEAkB,SAAAlB,KAAAmB,KAAA,CACA,GAAAC,GAEAxB,EACAyB,GAEA,WACA,GAAAC,GAAA,6BAGAC,EAAA,KAEAH,GAAA,SAAAlB,GAGA,GAGAmB,GAHAG,EAAAV,SAAAW,gBAAAH,EAAApB,EAAAwB,MAKAC,EAAA,SAAAtB,EAAAuB,GACAvB,EAAAA,EAAAwB,QAAA,SAAA,IAAAA,QAAA,IAAA,IAEA,IAAAC,GAAA,6BACAC,EAAA,qBAEAD,EAAAE,KAAA3B,IAAA0B,EAAAC,KAAA3B,KACAmB,EAAAS,aAAA5B,EAAAuB,IAIAM,EAAA,WACAhC,EAAAiC,GAAA,SAAAR,EAEA,KAAA,GAAAS,GAAAC,UAAAjC,OAAAkC,EAAAC,MAAAH,GAAAI,EAAA,EAAAJ,EAAAI,EAAAA,IACAF,EAAAE,GAAAH,UAAAG,EAGA,IAAAC,IAAA,EACAC,GAAA,EACAC,EAAAzB,MAEA,KACA,IAAA,GAAA0B,GAAAC,EAAAP,EAAAQ,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAIA,IAAA,GAHAS,GAAAN,EAAAO,MACAC,GAAA,QAAA,UAAA,SAEAC,EAAA,EAAAA,EAAAD,EAAAhD,OAAAiD,IAAA,CACA,GAAAhD,GAAA+C,EAAAC,EACAhD,GAAA6C,EAAA,IAAA7C,CACA,IAAAuB,GAAA1B,EAAAG,KAAAA,IAAAZ,MAAA6D,SAAAjD,EAEAsB,GAAAtB,EAAAuB,IAGA,MAAA2B,GACAb,GAAA,EACAC,EAAAY,EACA,QACA,KACAd,GAAAI,EAAAA,WACAA,EAAAA,YAEA,QACA,GAAAH,EACA,KAAAC,KAMA,QAAAzC,EAAAwB,MACA,IAAA,QACAF,EAAAV,SAAAW,gBAAAH,EAAA,IAEA,IAAAkC,IAAA,EACAC,GAAA,EACAC,EAAAxC,MAEA,KACA,IAAA,GAAAyC,GAAAC,EAAA1D,EAAA2D,SAAAf,OAAAC,cAAAS,GAAAG,EAAAC,EAAAZ,QAAAC,MAAAO,GAAA,EAAA,CACA,GAAAM,GAAAH,EAAAR,MAEAY,EAAA3C,EAAA0C,EACAC,IACAvC,EAAAwC,YAAAD,IAGA,MAAAR,GACAE,GAAA,EACAC,EAAAH,EACA,QACA,KACAC,GAAAI,EAAAA,WACAA,EAAAA,YAEA,QACA,GAAAH,EACA,KAAAC,IAKAxD,EAAAiC,GAAA,MAAA,SAAA2B,GACA,GAAAC,GAAA3C,EAAA0C,EACAC,IACAvC,EAAAwC,YAAAD,KAIA7D,EAAAiC,GAAA,SAAA,SAAA2B,GACAtC,EAAAyC,YAAApD,EAAAiD,KAGA,KAAA,OACA5B,EAAA,OAAA,UAEAb,EAAA,SAAAhB,EAAAuB,GACA,OAAAvB,GACA,IAAA,QACAmB,EAAAS,aAAA,QAAAL,EAEA,KAAA,IACAJ,EAAAS,aAAA,IAAAzB,EAAAR,KAAAkE,QACA,MACA,KAAA,SACA1C,EAAAS,aAAA,SAAAL,EAEA,KAAA,IACAJ,EAAAS,aAAA,IAAAxB,EAAAT,KAAAkE,UAKA,MACA,KAAA,SACAhC,EAAA,OAAA,UAEAb,EAAA,SAAAhB,EAAAuB,GAMA,OAAAvB,GACA,IAAA,IACAmB,EAAAS,aAAA,IAAAL,EACA,MACA,KAAA,IACAJ,EAAAS,aAAA,KAAAL,EACA,MACA,KAAA,IACAJ,EAAAS,aAAA,MAAAL,KASA,GAAA,kBAAAP,GAAA,CACAG,EAAA2C,GAAAvD,EAAAV,EAEA,KAAA,GAAAG,KAAAH,GAAAG,OACAgB,EAAA+C,OAAAF,OAAAhE,IAAAG,EAAAH,EAAAG,KAAAA,IAKA,OAFAH,GAAAiC,GAAA,SAAAd,GAEAG,IAIA5B,EAAAG,EAAAoB,KAAAL,SAAAW,gBAAAH,EAAA,OAEA1B,EAAAqC,aAAA,QAAAX,GACA1B,EAAAqC,aAAA,UAAAV,GAGA3B,EAAAuE,GAAAvD,EAAAb,GAEAsB,EAAA,SAAAhB,GACA,GAAA,UAAAA,GAAA,WAAAA,EAAA,CACA,GAAAgE,GAAApE,EAAAD,KAAAkE,QACAI,EAAA/D,EAAAP,KAAAkE,OAGAtE,GAAAqC,aAAA,WAAAzB,EAAAR,KAAAkE,QAAAzD,EAAAT,KAAAkE,QAAAG,EAAAC,GAAAC,KAAA,KAEA,IAAAC,GAAAC,KAAAC,IAAAjF,MAAAU,MAAAC,OAAAJ,KAAAkE,OAAAlD,cAAAqD,EAAA5E,MAAAU,MAAAC,OAAAJ,KAAAkE,OAAAjD,eAAAqD,GAEAK,EAAAN,EAAAG,EACAI,EAAAN,EAAAE,CAEAxE,MAAAkE,OAAA/C,KAAAc,aAAA,QAAA0C,GACA3E,KAAAkE,OAAA/C,KAAAc,aAAA,SAAA2C,KAMAvD,EAAA+C,OAAAF,OAAAnE,IAAA,UACAsB,EAAA+C,OAAAF,OAAAnE,IAAA,WAEAA,EAAAoC,GAAA,SAAAd,GAEAzB,EAAAoE,YAAA5C,EAAArB,EAAA8E,YAIA,MAAA7E,MAAAmB","file":"draft-svg.min.js","sourcesContent":[null,"/*\n* draft-svg - A plugin for draft.js that renders models using SVG\n* version v0.2.0\n* http://draft.D1SC0te.ch\n*\n* copyright Jordi Pakey-Rodriguez <jordi.orlando@hexa.io>\n* license MIT\n*\n* BUILT: Fri Feb 05 2016 10:48:43 GMT-0600 (CST)\n*/\n'use strict';\n\n(function () {\n  draft.View.mixin({\n    svg: function svg(width, height) {\n      var _this = this;\n\n      var getWidth = function getWidth(element) {\n        return draft.types.length(element.prop('width')).valueOf();\n      };\n      var getHeight = function getHeight(element) {\n        return draft.types.length(element.prop('height')).valueOf();\n      };\n\n      var calcX = function calcX(element) {\n        return draft.types.length(element.prop('x') || 0) - getWidth(element) / 2;\n      };\n      var calcY = function calcY(element) {\n        return -draft.types.length(element.prop('y') || 0) - getHeight(element) / 2;\n      };\n\n      var domPrefix = this.doc.domID + ':' + this.domID + ':svg';\n      var domID = function domID(element) {\n        return domPrefix + ':' + element.domID;\n      };\n      var find = function find(element) {\n        return document.getElementByID(domID(element));\n      };\n\n      this._svgMaxWidth = width || this._svgMaxWidth || getWidth(this);\n      this._svgMaxHeight = height || this._svgMaxHeight || getHeight(this);\n\n      if (this._svg === undefined) {\n        var _render;\n\n        var svg;\n        var listener;\n\n        (function () {\n          var NS = 'http://www.w3.org/2000/svg';\n          // const XMLNS = 'http://www.w3.org/2000/xmlns/';\n          // const XLINK = 'http://www.w3.org/1999/xlink';\n          var VERSION = '1.1';\n\n          _render = function render(element) {\n            // console.info('rendering svg:', element.domID);\n\n            var node = document.createElementNS(NS, element.type);\n\n            // TODO: separate listener for each property?\n            var listener;\n\n            var styleListener = function styleListener(prop, val) {\n              prop = prop.replace('.color', '').replace('.', '-');\n\n              var color = /^(fill|stroke)(-opacity)?$/;\n              var stroke = /^stroke-(width)?$/;\n\n              if (color.test(prop) || stroke.test(prop)) {\n                node.setAttribute(prop, val);\n              }\n            };\n\n            var setStyle = function setStyle() {\n              element.on('change', styleListener);\n\n              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var style = _step.value;\n                  var _arr = ['color', 'opacity', 'width'];\n\n                  for (var _i = 0; _i < _arr.length; _i++) {\n                    var prop = _arr[_i];\n                    prop = style + '.' + prop;\n                    var val = element.prop(prop) || draft.defaults[prop];\n\n                    styleListener(prop, val);\n                  }\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n            };\n\n            switch (element.type) {\n              case 'group':\n                node = document.createElementNS(NS, 'g');\n\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                  for (var _iterator2 = element.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var child = _step2.value;\n\n                    var childNode = _render(child);\n                    if (childNode) {\n                      node.appendChild(childNode);\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError2 = true;\n                  _iteratorError2 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                      _iterator2.return();\n                    }\n                  } finally {\n                    if (_didIteratorError2) {\n                      throw _iteratorError2;\n                    }\n                  }\n                }\n\n                element.on('add', function (child) {\n                  var childNode = _render(child);\n                  if (childNode) {\n                    node.appendChild(childNode);\n                  }\n                });\n\n                element.on('remove', function (child) {\n                  node.removeChild(find(child));\n                });\n              // Falls through\n              case 'rect':\n                setStyle('fill', 'stroke');\n\n                listener = function listener(prop, val) {\n                  switch (prop) {\n                    case 'width':\n                      node.setAttribute('width', val);\n                    // Falls through\n                    case 'x':\n                      node.setAttribute('x', calcX(this.target));\n                      break;\n                    case 'height':\n                      node.setAttribute('height', val);\n                    // Falls through\n                    case 'y':\n                      node.setAttribute('y', calcY(this.target));\n                      break;\n                  }\n                };\n\n                break;\n              case 'circle':\n                setStyle('fill', 'stroke');\n\n                listener = function listener(prop, val) {\n                  /* if (prop === 'cy') {\n                    val *= -1;\n                  }\n                   node.setAttribute(prop, val); */\n\n                  switch (prop) {\n                    case 'r':\n                      node.setAttribute('r', val);\n                      break;\n                    case 'x':\n                      node.setAttribute('cx', val);\n                      break;\n                    case 'y':\n                      node.setAttribute('cy', -val);\n                      break;\n                  }\n                };\n\n                break;\n            }\n\n            // TODO: support all elements\n            if (typeof listener === 'function') {\n              node.id = domID(element);\n\n              for (var prop in element.prop()) {\n                listener.apply({ target: element }, [prop, element.prop(prop)]);\n              }\n\n              element.on('change', listener);\n\n              return node;\n            }\n          };\n\n          svg = _this._svg = document.createElementNS(NS, 'svg');\n\n          svg.setAttribute('xmlns', NS);\n          svg.setAttribute('version', VERSION);\n          // svg.setAttributeNS(XMLNS, 'xmlns:xlink', XLINK);\n\n          svg.id = domID(_this);\n\n          listener = function listener(prop) {\n            if (prop === 'width' || prop === 'height') {\n              var targetWidth = getWidth(this.target);\n              var targetHeight = getHeight(this.target);\n\n              // 1 SVG user unit = 1px\n              svg.setAttribute('viewBox', [calcX(this.target), calcY(this.target), targetWidth, targetHeight].join(' '));\n\n              var zoom = Math.min(draft.types.length(this.target._svgMaxWidth) / targetWidth, draft.types.length(this.target._svgMaxHeight) / targetHeight);\n\n              var svgWidth = targetWidth * zoom;\n              var svgHeight = targetHeight * zoom;\n\n              this.target._svg.setAttribute('width', svgWidth);\n              this.target._svg.setAttribute('height', svgHeight);\n\n              // console.info('aspect ratio:', this.target.aspectRatio);\n            }\n          };\n\n          listener.apply({ target: _this }, ['width']);\n          listener.apply({ target: _this }, ['height']);\n\n          _this.on('change', listener);\n\n          svg.appendChild(_render(_this.parent));\n        })();\n      }\n\n      return this._svg;\n    }\n  });\n})();"],"sourceRoot":"/source/"}